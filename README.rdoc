=Fig

===DRY up those magic numbers and hard coded strings into something more managable.  Fig is the smart way to manage stuff that really belongs in a config file instead of scattered throughout your code.

Here are the Rdocs[http://hopsoft.github.com/fig/README.rdoc.html]

Video overview and tutorial. Jump to 2 minutes in if you want to dive straight into the tutorial.
<object width="640" height="498"> <param name="movie" value="http://content.screencast.com/users/natehop/folders/hopsoft/media/973f9d87-35b9-4ce9-9732-5ab8270300d7/flvplayer.swf"></param> <param name="quality" value="high"></param> <param name="bgcolor" value="#FFFFFF"></param> <param name="flashVars" value="thumb=http://content.screencast.com/users/natehop/folders/hopsoft/media/973f9d87-35b9-4ce9-9732-5ab8270300d7/FirstFrame.jpg&containerwidth=640&containerheight=498&content=http://content.screencast.com/users/natehop/folders/hopsoft/media/973f9d87-35b9-4ce9-9732-5ab8270300d7/fig2.mp4"></param> <param name="allowFullScreen" value="true"></param> <param name="scale" value="showall"></param> <param name="allowScriptAccess" value="always"></param> <param name="base" value="http://content.screencast.com/users/natehop/folders/hopsoft/media/973f9d87-35b9-4ce9-9732-5ab8270300d7/"></param>  <embed src="http://content.screencast.com/users/natehop/folders/hopsoft/media/973f9d87-35b9-4ce9-9732-5ab8270300d7/flvplayer.swf" quality="high" bgcolor="#FFFFFF" width="640" height="498" type="application/x-shockwave-flash" allowScriptAccess="always" flashVars="thumb=http://content.screencast.com/users/natehop/folders/hopsoft/media/973f9d87-35b9-4ce9-9732-5ab8270300d7/FirstFrame.jpg&containerwidth=640&containerheight=498&content=http://content.screencast.com/users/natehop/folders/hopsoft/media/973f9d87-35b9-4ce9-9732-5ab8270300d7/fig2.mp4" allowFullScreen="true" base="http://content.screencast.com/users/natehop/folders/hopsoft/media/973f9d87-35b9-4ce9-9732-5ab8270300d7/" scale="showall"></embed> </object>

==Why

Even though Ruby is a dynamic language and hard coded values aren't as big a deal, it's still good practice to have a centralized place to hold certain settings.

In the past I would use a globally available Hash to store this stuff, but have always wanted something more powerful and elegant.


==What

Fig is a simple to use configuration management tool for Ruby applications and libraries.  

The primary features are: 
* Multiple configuration files
* Dynamic updating and re-loading of configuration files
* Simple dot-notation access to configuration settings
* YAML access to configuration settings
* Safe options to request settings that may not exist
* Interpolation to help DRY up configuration files through reuse of settings
* Thread safe

==How

The simplest way to get started is to watch the 10 minute tutorial.



===Installation

Fig is availabe as both a Gem and as a Rails Plugin.

====To install as a Gem:

First, be sure that Github has been added as a gem source. (This only needs to be done once.)
  gem sources -a http://gems.github.com

Second, install the Gem.
  sudo gem install hopsoft-fig

====To install as a Rails Plugin:
  script/plugin install git://github.com/hopsoft/fig.git


===Usage
Create a YAML file that will serve as one of the configuration files you plan to use.  In a Rails application, I usually create the file config/app.yml, but you can name the file anything you like and can save it to any location within your appliation or library.

Require Fig either explicitly or implicitly.  In a Rails application, I generally do this in environment.rb. Note: this step isn't required if you installed as a Rails plugin.
  # implicit
  require 'hopsoft/fig'
  # explicit
  gem 'hopsoft-fig'

Instantiate a Fig object that is globally available to your application.  In a Rails application, I generally do this in environment.rb.
  APP_CONFIG = Hopsoft::Fig.new(RAILS_ROOT + '/config/app.yml')

Start using your settings.
  puts APP_CONFIG.settings.message
  puts APP_CONFIG.yaml['message']
  puts APP_CONFIG.get_setting('message')

  # returns nil instead of an error when the setting doesn't exist
  puts APP_CONFIG.get_setting('some.nested.setting.that.may.not.exist')
  
Reuse settings in your YAML file (This is a great way to apply the DRY principle to your configuration settings):
  name: Nathan Hopkins
  message: Hello from {fig:name}.
 
  puts APP_CONFIG.get_setting('message')
  # outputs -> Hello from Nathan Hopkins.

Update the YAML file and load the changes without restarting your application.
  APP_CONFIG.load


Copyright (c) 2008 Hopsoft LLC, released under the MIT license
